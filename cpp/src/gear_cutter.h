// --------------------------------------------------------------------------
//
// GearCutter 0.2
// Generation of involute gear tooth profiles
// Copyright (C) 2009-2024 Konstantinos Poulios
//
// --------------------------------------------------------------------------
//
// This file is part of GearCutter.
//
// GearCutter is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
// --------------------------------------------------------------------------

#include <vector>
#include <string>
#include <memory>

struct Arc {
  double x_tool_m, y_tool_m, fi_tool_1, fi_tool_2,  rho,
         x_part_m, y_part_m, fi_part_1, fi_part_2,
         r_m, fi_m;
};

struct LineSeg {
  double x_tool_1, y_tool_1, x_tool_2, y_tool_2, fi_tool_12,
         x_part_1, y_part_1, x_part_2, y_part_2, fi_part_12,
         r1, r2;
};

struct Segment {
  int id;
  std::unique_ptr<Arc> arc;
  std::unique_ptr<LineSeg> line;
  Segment(int id_, std::unique_ptr<LineSeg> line_)
    : id(id_), line(std::move(line_)) {}
  Segment(int id_, std::unique_ptr<Arc> arc_)
    : id(id_), arc(std::move(arc_)) {}
//  Segment(const Segment&) = delete;
//  Segment(Segment&&) = default;
};

enum class ToolType {
  EXTERNAL=0,
  EXTERNAL_WITH_PROTUBERANCE=1,
  INTERNAL=2,
  POLYLINE=3
};

void generate_external_gear_tooth_profile
  (double m_n, double beta, double h_aP0, double alfa_P0, double rho_aP0, // tooth shape parameters
   int z, double x, double r_a,                                           // gear parameters
   double h_fP0,                                                          // tool specific parameters
   int n_sim, int n_profile, int n_tip,                                   // simulation parameters
   std::vector<std::vector<Segment> > &tool_contours, // output
   std::vector<std::vector<double> > &contour_xy,     // output
   std::vector<int> &contour_xy_id);                  // output

void generate_external_gear_tooth_profile // with protuberance
  (double m_n, double beta, double h_aP0, double alfa_P0, double rho_aP0, // tooth shape parameters
   int z, double x, double r_a,                                           // gear parameters
   double h_fP0, double h_FaP0, double alfa_KP0, double alfa_prP0,        // tool specific parameters
   int n_sim, int n_profile, int n_tip,                                   // simulation parameters
   std::vector<std::vector<Segment> > &tool_contours, // output
   std::vector<std::vector<double> > &contour_xy,     // output
   std::vector<int> &contour_xy_id);                  // output

/**
 * Generate a tooth profile for an internal gear. The tool is assumed to be
 * a pinion with the given gear parameters. The profile is generated by
 * simulating the cutting process between the tool and a workpiece.
 *
 * @param[in] m_n            Normal module of the gear in mm
 * @param[in] beta           Helix angle in radians
 * @param[in] h_aP0          Tool addendum height in mm
 * @param[in] alfa_P0        Tool pressure angle in degrees
 * @param[in] rho_aP0        Tool tip radius in mm
 * @param[in] z              Number of teeth of the gear
 * @param[in] x              Profile shift coefficient (dimensionless)
 * @param[in] r_a            Tip radius of the gear in mm
 * @param[in] z_0            Number of teeth of the tool
 * @param[in] r_a0           Tip radius of the tool in mm
 * @param[in] n_sim          Number of simulation steps
 * @param[in] n_profile      Number of points in the generated profile
 * @param[in] n_tip          Number of points used to generate the tip of the tooth
 * @param[out] tool_contours Contours of the tool (output)
 * @param[out] contour_xy    Points of the generated tooth profile (output)
 * @param[out] contour_xy_id Id of the points of the generated tooth profile (output)
 */
void generate_internal_gear_tooth_profile // internal gear cutting
  (double m_n, double beta, double h_aP0, double alfa_P0, double rho_aP0, // tooth shape parameters
   int z, double x, double r_a,                                           // gear parameters
   int z_0, double r_a0,                                                  // tool specific parameters
   int n_sim, int n_profile, int n_tip,                                   // simulation parameters
   std::vector<std::vector<Segment> > &tool_contours,    // output
   std::vector<std::vector<double> > &contour_xy,        // output
   std::vector<int> &contour_xy_id);                     // output

/**
 * Generate a tooth profile based on the given parameters. The tooth profile
 * is stored in the output parameters \p contour_xy and \p contour_xy_id. The
 * profile is generated by simulating the cutting process of a tool with the
 * given parameters.
 *
 * @param[in] tool_type      Type of the tool (external or internal)
 * @param[in] m_n            Normal module of the gear in mm
 * @param[in] beta           Helix angle in radians
 * @param[in] h_aP0          Height of the addendum circle in mm
 * @param[in] z              Number of teeth of the gear
 * @param[in] x              Profile shift coefficient (dimensionless)
 * @param[in] r_a            Tip radius of the gear in mm
 * @param[in] z_0            Number of teeth of the tool (for internal gears only)
 * @param[in] r_Ff           Radius of the tool root fillet in mm (for internal gears only)
 * @param[in] a_tool         Distance from the tool axis to the tip of the tooth in mm (for internal gears only)
 * @param[in] n_sim          Number of simulation steps
 * @param[in] n_profile      Number of points in the generated profile
 * @param[in] n_tip          Number of points used to generate the tip of the tooth
 * @param[in] tool_contours  Contours of the tool (output)
 * @param[out] contour_xy    Points of the generated tooth profile (output)
 * @param[out] contour_xy_id Id of the points of the generated tooth profile (output)
 */
void generate_profile(ToolType tool_type,
                      const double m_n,
                      const double beta,
                      const double h_aP0,
                      const int z,
                      const double x,
                      const double r_a,
                      const int z_0,       // only for internal gears
                      const double r_Ff,   // only for internal gears
                      const double a_tool, // only for internal gears
                      const int n_sim,
                      const int n_profile,
                      const int n_tip,
                      const std::vector<std::vector<Segment> > &tool_contours,
                      std::vector<std::vector<double> > &contour_xy, // output
                      std::vector<int> &contour_xy_id);
